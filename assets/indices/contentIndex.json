{
  "/en/": {
    "title": "AWS Certified Developer - Associate - Exam preparation notes",
    "content": "\r\n**AWS Certified Developer - Associate** showcases skills and knowledge in developing, optimizing, packaging, and deploying applications, using CI/CD workflows, and identifying and resolving application issues. This certification is a good starting point on the AWS Certification journey for individuals in IT or cloud developer job roles.\r\n\r\n# Who should take this exam?\r\n\r\nPer the exam guide, one or more years of prior hands-on experience is recommended in developing and maintaining applications by using AWS services. This certification is an ideal starting point on the AWS Certification journey for individuals in IT or cloud developer job roles.\r\n\r\nCandidates who do not have any IT work experience would benefit from first earning the AWS Certified Cloud Practitioner to get foundational knowledge of AWS Cloud and services before attempting the AWS Certified Developer - Associate exam.\r\n\r\nCandidates who do not have any IT work experience would benefit from first earning the AWS Certified Cloud Practitioner to get foundational knowledge of AWS Cloud and services before attempting the AWS Certified Developer - Associate exam.\r\n\r\n# How will the AWS Certified Developer - Associate help my career?\r\n\r\nCertified individuals report increased confidence as a result of earning this industry-recognized certification and increased credibility with technical IT/cloud colleagues and customers. Preparing for and earning the AWS Certified Developer - Associate can get you off to a strong start to earn additional AWS Certifications in the Professional and Specialty categories.\r\n\r\n# What certification(s) should I earn next after AWS Certified Developer - Associate?\r\n\r\nThe AWS Certified SysOps Administrator - Associate and AWS Certified DevOps Engineer - Professional are certifications that other cloud professionals have earned to advance further in roles like cloud DevOps engineer and software development engineer. Cloud professionals have also earned the AWS Certified Data Engineer- Associate to advance toward roles like machine learning engineer. View AWS Certification paths to learn more and plan your AWS Certification journey.\r\n\r\n# How long is this certification valid for?\r\n\r\nThis certification is valid for 3 years. Before your certification expires, you can recertify by passing the latest version of this exam, or by earning the AWS Certified DevOps Engineer - Professional, which will automatically recertify this Associate-level certification. Learn more about recertification options for AWS Certifications.\r\n\r\n# What can this documentation do ?\r\n\r\nThis documentation provides you with a condensed version of whatever knowledge required to get through the DVA-C02 exam. However, this does not contain all knowledge, some might not be detailed due to this being mostly a personal documentation. You can send an Issue in the GitHub Repo of this documentation in case errors/misinformation was found, which is highly appreciated.\r\n\r\n# Now that you know it...\r\n\r\nCloud or Belize, where would you wanna go ?\r\n\r\n![Pinkman](/images/homepage/jessewannacook.jpg)",
    "lastmodified": "2024-12-06T18:42:26.343134+07:00",
    "tags": []
  },
  "/en/0-preparation/": {
    "title": "Chapter 0: Prepare your environment",
    "content": "\r\nYou can't just learn about the cloud platform without creating an account and use the platform yourself, right ?\r\n\r\nThat's why we have a few steps to go through here.\r\n\r\n\u003e [!note] Note\r\n\u003e\r\n\u003e Some images contains older AWS UI due to being taken from others' videos or block. This is unwanted and inevitable due to my accounts having been set up and some processes can't be reversed.\r\n\r\n# Prepare your AWS Account\r\n## Create an AWS Account\r\n\r\n\u003e [!note] Note\r\n\u003e\r\n\u003e If you already have an AWS account, skip to [Sign in to your AWS root Account](#sign-in-to-your-aws-root-account).\r\n\u003e\r\n\u003e If you also have an IAM user already, skip to [Sign in to your IAM user](#sign-in-to-your-iam-user).\r\n\r\n\u003e [!info] Info\r\n\u003e\r\n\u003e You are required to have either a credit or a debit card with international payment support, issued by one of the following: Visa, Mastercard, American Express. Consider applying to have your card issued before creating an AWS Account.\r\n\r\nGo to the [AWS Homepage](https://aws.amazon.com/).\r\n\r\nClick on the **Create an AWS Account** button.\r\n\r\n![AWS-Home](/images/preparation/01-0001.png)\r\n\r\nAt the **Sign up for AWS** screen, enter your information and click **Verify email address**.\r\n\r\n![AWS-Signup](/images/preparation/01-0002.png)\r\n\r\nFind the e-mail with the verification code.\r\n\r\n![AWS-Vericode-Mail](/images/preparation/01-0004.png)\r\n\r\nEnter the verification code.\r\n\r\n![AWS-Verification](/images/preparation/01-0003.png)\r\n\r\nAt the **Contact information** page:\r\n\r\n- Check **Personal - For your own projects**\r\n- Enter your contact information\r\n\r\n![Contact Information](/images/preparation/01-0005.png)\r\n\r\nAt **Billing information**, enter your card number and other informations on your card.\r\n\r\n![Billing information](/images/preparation/01-0006.png)\r\n\r\nFor the final step, you're required to confirm your identity. Choose your confirmation method and enter your country code.\r\n\r\n![confirm your identity](/images/preparation/01-0007.png)\r\n\r\n![confirm your identity](/images/preparation/01-0008.png)\r\n\r\nChoose a support plan. As a learner, I would just choose the free Basic plan. You can always change your support plan later.\r\n\r\n![support plan](/images/preparation/01-0009.png)\r\n\r\nOkay, at this point, the account creation process is done. Your account ID is a 12-digit number (e.g. `123456789012`).\r\n\r\nNow you'll have to sign in to your account.\r\n\r\n## Sign in to your AWS root Account\r\n\r\nEnter [this link](https://console.aws.amazon.com/console/home?nc2=h_ct\u0026src=header-signin) to sign in to your account.\r\n\r\nAlternatively, you can sign in from the AWS home page.\r\n\r\n![sign in](/images/preparation/01-1001.png)\r\n\r\nOn the sign in page, click the **Sign in using root user email** button.\r\n\r\n![sign in](/images/preparation/01-1002.png)\r\n\r\nEnter your e-mail address on the next page.\r\n\r\n![root sign in](/images/preparation/01-1003.png)\r\n\r\nEnter the captcha for human verification.\r\n\r\n![root sign in captcha](/images/preparation/01-1004.png)\r\n\r\nEnter the password, then sign in.\r\n\r\n![password](/images/preparation/01-1005.png)\r\n\r\nNow you're in, but we're not there yet.\r\n\r\n![AWS Console](/images/preparation/01-1006.png)\r\n\r\n## Secure your AWS Root Account with MFA\r\n\r\nEnter the [Identity \u0026 Access Management (IAM) Console](console.aws.amazon.com/iam/home)\r\n\r\nYou'll be prompted to add MFA for your Root user. Click **Add MFA**\r\n\r\n![IAM Console](/images/preparation/01-1007.png)\r\n\r\nOn the **Security Credentials** page, click **Assign MFA**\r\n\r\n![IAM Console](/images/preparation/01-1008.png)\r\n\r\nProceed with the MFA Creation\r\n\r\n![MFA](/images/preparation/01-1009.png)\r\n\r\n\u003e [!note] Note\r\n\u003e\r\n\u003e You can either use a browser extension, or an app on your phone for authentification.\r\n\r\nAfter assigning MFA to your root account, the prompt at the main IAM console will look like this:\r\n\r\n![IAM Dash](/images/preparation/01-1010.png)\r\n\r\n## Create an IAM administrative user\r\n\r\nThe root account is basically \"God Mode\". Unless you're about to do some extremely crucial, account-level-only tasks, or something equal to an emergency case, using and exposing the root account is not recommended. That's why that account was given multiple layers of protection.\r\n\r\nNow, since I don't encourage using root account just to create and mess with your on-cloud resources, yet these lessons require you to interact with all services and resources, let's create an IAM user with Administrator Access permission (I'll tell you the different in a later chapter). I'll call it _\"administraitor\"_ (no typo, let's hope he'll never break bad and turn into a traitor).\r\n\r\n![IAM Admin](/images/preparation/01-1011.png)\r\n\r\nProceed through all steps with the orange button (or whatever non-white button).\r\n\r\n![IAM Admin](/images/preparation/01-1012.png)\r\n![IAM Admin](/images/preparation/01-1013.png)\r\n\r\nOh yes, the group creation dialog. You can add the _**AdministratorAccess**_ policy for convinience, or create a policy yourself.\r\n\r\n![IAM Admin](/images/preparation/01-1014.png)\r\n![IAM Admin](/images/preparation/01-1015.png)\r\n\r\nNow we're almost done. SAVE YOUR PASSWORD SOMEWHERE ! You're responsible for keeping it.\r\n\r\n![IAM Admin](/images/preparation/01-1016.png)\r\n\r\nGood ! Now your account is ready for the first cook !\r\n\r\n## Sign in to your IAM user\r\n\r\nThe shortcut link is [here](https://signin.aws.amazon.com/console), for your convinience.\r\n\r\nThe process is much simpler now, enter what you need and click **Sign in**\r\n\r\n![IAM Admin](/images/preparation/01-1017.png)\r\n\r\n# Prepare your tools\r\n\r\nTo proceed with the hands-on labs in the course, it is recommended to have these tools:\r\n\r\n- A computer with an operating system and network connection of course (heheh). But hey, for some reasons, Linux is prefered for these kinds of work.\r\n\r\n- Any up-to-date browser\r\n\r\n- An IDE or code editor. In my illustrations, I'll use Visual Studio Code with the AWS Toolkit installed.\r\n\r\n- A version manager. Git is recommended.\r\n\r\n- AWS CLI v2\r\n\r\n# Hands-on source code\r\n\r\nGet the source code [here](https://github.com/nealdct/aws-dva-code)\r\n\r\nYou can clone the repository using the Git command:\r\n\r\n```bash\r\ngit clone https://github.com/nealdct/aws-dva-code.git\r\n```\r\n\r\n**Congratulations !** Now you're ready to cook your own knowledge.\r\n\r\n![Mr. White](/images/homepage/waltercook.jpg)",
    "lastmodified": "2024-12-10T16:14:46.8738888+07:00",
    "tags": []
  },
  "/en/1-IAM/": {
    "title": "Chapter 1: AWS Identity and Access Management",
    "content": "\r\nUnless you somehow skip chapter 0 (or at least, a certain part of it), [where you should take a look and follow the instructions]((../0-preparation/#create-an-iam-administrative-user)), you should've heard of the term **_\"IAM\"_** or **_\"IAM account\"_**. **IAM** is the short form of **Identity and Access Management** an AWS service which provides the capability of **Authentication** and **Authorisation** (about the spelling, I'm not British, just want to _eff_ around). This chapter provides you with a basic view on certain aspects of the IAM service.\r\n\r\n# AWS root account\r\n\r\nWhen you first create an Amazon Web Services (AWS) account, you begin with a single sign-in identity that has complete access to all AWS services and resources in the account. This identity is called the AWS account root user and is accessed by signing in with the email address and password that you used to create the account.\r\n\r\n## List of some root-account-specific tasks\r\n\r\nThe root account allows for several high-privileged tasks that even an IAM account with the highest administrative permissions is not allowed to perform. Here are some of these tasks:\r\n\r\n### Account Management Tasks\r\n\r\n- Change your account settings (account name, email address, root user password, and root user access keys)\r\n- Restore IAM user permissions (in case of accidental self permission revoking of an IAM user, usually an administrative one)\r\n- Close your AWS account\r\n\r\n### Billing Tasks\r\n\r\n- Activate IAM access to the **Billing and Cost Management** console\r\n- Certain tasks and invoices might require a root account, even with **IAM access to Billing and Cost Management** enabled.\r\n\r\n### AWS GovCloud (US) Tasks\r\n\r\n- Sign up for AWS GovCloud (US).\r\n- Request AWS GovCloud (US) account root user access keys from AWS Support.\r\n\r\n### Amazon EC2 Task\r\n\r\n- Register as a seller in the Reserved Instance Marketplace.\r\n\r\n### AWS KMS Task\r\n\r\n- In the event that an AWS Key Management Service key becomes unmanageable, an administrator can recover it by contacting AWS Support; however, AWS Support responds to your root user's primary phone number for authorization by confirming the ticket OTP.\r\n\r\n### Amazon Mechanical Turk Task\r\n\r\n- Link Your AWS account to your MTurk Requester account.\r\n\r\n### Amazon Simple Storage Service (S3) Tasks\r\n\r\n- Configure an Amazon S3 bucket to enable MFA (multi-factor authentication).\r\n\r\n- Edit or delete an Amazon S3 bucket policy that denies all principals.\r\n\r\n    You can use privileged actions to unlock an Amazon S3 bucket with a misconfigured bucket policy. \r\n\r\n### Amazon Simple Queue Service Task\r\n- Edit or delete an Amazon SQS resource-based policy that denies all principals.\r\n\r\n    You can use privileged actions to unlock an Amazon SQS queue with a misconfigured resource-based policy\r\n\r\n## Why not using the root account ?\r\nAs the root account can perform specific tasks that can completely change your account, or see and modify the other access priviledges and vital information beyond the normal use. It is required that the root account is locked and secured somewhere out of normal reach. Instead, an administrative IAM user still allows you to access most resources and create other identities with different limited permissions as for your purposes.\r\n\r\nAfter all, you wouldn't want to have your \"God Mode\" exposed to either see yourself screw up with too much power at the wrong time, or this...\r\n\r\n![This place is hijacked](/images/1-IAM/0001.jpg)\r\n\r\n# Identity and Access Management (IAM)\r\n\r\nAWS Identity and Access Management (IAM) is a web service that helps you securely control access to AWS resources. With IAM, you can manage permissions that control which AWS resources users can access. You use IAM to control who is authenticated (signed in) and authorised (has permissions) to use resources. IAM provides the infrastructure necessary to control authentication and authorisation for your AWS accounts.\r\n\r\n## Authentication and Authorisation\r\n\r\nTo be short:\r\n\r\n- To authenticate someone means to allow or deny them from entering based on their identity.\r\n\r\n- To authorise someone means to allow or deny them from doing tasked based on their permission. This happens after the authentication is completed and the identity is allowed.\r\n\r\n## How does IAM work ?\r\n\r\nWhen a user/application tries to sign-in using the credentials, IAM matches the sign-in credentials to a principal (an IAM user, federated user, IAM role, or application) trusted by the AWS account and authenticates permission to access AWS. During the logged-in session, IAM makes a request to grant the principal access to resources when. IAM verifies that your identity is on the list of authorized principals, determines the policies control the level of access to be granted, and evaluates any other policies that might be in effect. Principals within your AWS account or from another AWS account that you trust can make authorisation requests.\r\n\r\nThe following paragraph illustrates the authentication and authorisation process with AWS IAM:\r\n\r\n![IAM Process](/images/1-IAM/0002.png)\r\n\r\nWhen a principal tries to use the AWS Management Console, the AWS API, or the AWS CLI, that principal sends a request to AWS. The request includes the following information:\r\n\r\n- **Actions or operations** – The actions or operations that the principal wants to perform, such as an action in the AWS Management Console, or an operation in the AWS CLI or AWS API.\r\n\r\n- **Resources** – The AWS resource object upon which the principal requests to perform an action or operation.\r\n\r\n- **Principal** – The person or application that used an entity (user or role) to send the request. Information about the principal includes the permission policies.\r\n\r\n- **Environment data** – Information about the IP address, user agent, SSL enabled status, and the timestamp.\r\n\r\n- **Resource data** – Data related to the resource requested, such as a DynamoDB table name or a tag on an Amazon EC2 instance.\r\n\r\nAWS gathers the request information into a request context, which IAM evaluates to authorize the request.\r\n\r\n# Detailed look\r\n\r\n - Components of IAM\r\n\r\n - Security credentials\r\n\r\n - Best practices\r\n\r\n - Identity providers and federation\r\n\r\n# Further reading\r\n\r\n- https://docs.aws.amazon.com/IAM/latest/UserGuide/\r\n- https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html\r\n",
    "lastmodified": "2024-12-10T16:11:35.2261588+07:00",
    "tags": []
  },
  "/en/1-IAM/components": {
    "title": "The components of AWS IAM",
    "content": "\r\nAWS IAM is based around the following components:\r\n\r\n- Users\r\n- User Groups\r\n- Roles\r\n- Policies\r\n\r\n# Users\r\n\r\nAn IAM user is an entity that you create in your AWS account. The IAM user represents the human user or workload who uses the IAM user to interact with AWS resources. An IAM user consists of a name and credentials.\r\n\r\nIAM creates the following ways to identify a user:\r\n\r\n- A \"friendly name\", which is a text string, defined as the **Name** value when you create an account. (e.g. `john362`, `administraitor`, etc.)\r\n\r\n- An Amazon Resource Name (ARN) (in the form of `arn:aws:iam::account-12-digit-ID-without-hyphens:user/Richard`). The ARN is used to specify and refer to the IAM user as a Principal or a resource across AWS.\r\n\r\n- A unique identifier for the IAM user. This ID is returned only when you use the API, Tools for Windows PowerShell, or AWS CLI to create the IAM user and is not seen in the management console.\r\n\r\nBy default, a new IAM user has no permissions to do anything. They are not authorized to perform any AWS operations or to access any AWS resources. An advantage of having individual IAM users is that you can assign permissions individually to each user.\r\n\r\nEach IAM user is associated with one and only one AWS account. Because IAM users are defined within your AWS account, they don't need to have a payment method on file with AWS. Any AWS activity performed by IAM users in your account is billed to your account.\r\n\r\n# User Groups\r\n\r\nA user group is a collection of users. User groups let you specify permissions for multiple users, which can make it easier to manage the permissions for those users. For example, you could have a user group called Admins and give that user group typical administrator permissions, any user who has joined that group automatically has the Admins group permissions. When the user is no longer a part of the administrator team, instead of editing their policies, you can simply remove them from the old IAM groups and add them to the appropriate new IAM groups.\r\n\r\nHere are some important characteristics of IAM groups:\r\n\r\n- A user group can contain many users, and a user can belong to multiple user groups.\r\n\r\n- User groups can't be nested; they can contain only users, not other IAM groups.\r\n\r\n- There is no default user group that automatically includes all users in the AWS account. If you want to have a user group like that, you must create it and assign each new user to it.\r\n\r\n- The number and size of IAM resources in an AWS account, such as the number of groups, and the number of groups that a user can be a member of, are limited. For more information, see [IAM and AWS STS quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html).\r\n\r\n# Role\r\n\r\nAn IAM role is an IAM identity that you can create in your account that has specific permissions (with policies that determine what it can or cannot do). Unlike an AWS IAM User, instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it. Also, a role does not have standard long-term credentials such as a password or access keys associated with it. Instead, when you assume a role, it provides you with temporary security credentials for your role session.\r\n\r\nIAM roles grant permissions to users, services and/or applications that normally do not have them. They can also be used to give permissions in your account to entities outside of it.\r\n\r\nA role can be assumed by multiple principals (users/services/apps) at the same time, yet a principal can only assume one role at once.\r\n\r\n# Policies\r\n\r\nA policy is an object in AWS that, when associated with an identity or resource, defines their permissions. AWS evaluates these policies when an IAM principal (user or role) makes a request. Permissions in the policies determine whether the request is allowed or denied. \r\n\r\nThe following policy types, listed in order from most frequently used to less frequently used, are available for use in AWS:\r\n\r\n- **Identity-based policies** – Attach managed and inline policies to IAM identities (users, groups to which users belong, or roles). Identity-based policies grant permissions to an identity.\r\n\r\n- **Resource-based policies** – Attach inline policies to resources. The most common examples of resource-based policies are Amazon S3 bucket policies and IAM role trust policies. Resource-based policies grant permissions to the principal that is specified in the policy. Principals can be in the same account as the resource or in other accounts.\r\n\r\n- **Permissions boundaries** – Use a managed policy as the permissions boundary for an IAM entity (user or role). That policy defines the maximum permissions that the identity-based policies can grant to an entity, but does not grant permissions. Permissions boundaries do not define the maximum permissions that a resource-based policy can grant to an entity.\r\n\r\n- **Organizations SCPs** – Use an AWS Organizations service control policy (SCP) to define the maximum permissions for IAM users and IAM roles within accounts in your organization or organizational unit (OU). SCPs limit permissions that identity-based policies or resource-based policies grant to IAM users or IAM roles within the account. SCPs do not grant permissions.\r\n\r\n- **Organizations RCPs** – Use an AWS Organizations resource control policy (RCP) to define the maximum permissions for resources within accounts in your organization or organizational unit (OU). RCPs limit permissions that identity-based and resource-based policies can grant to resources in accounts within your organization. RCPs do not grant permissions.\r\n\r\n- **Access control lists (ACLs)** – Use ACLs to control which principals in other accounts can access the resource to which the ACL is attached. ACLs are similar to resource-based policies, although they are the only policy type that does not use the JSON policy document structure. ACLs are cross-account permissions policies that grant permissions to the specified principal. ACLs cannot grant permissions to entities within the same account.\r\n\r\n- **Session policies** – Pass advanced session policies when you use the AWS CLI or AWS API to assume a role or a federated user. Session policies limit the permissions that the role or user's identity-based policies grant to the session. Session policies limit permissions for a created session, but do not grant permissions. For more information, see Session Policies.",
    "lastmodified": "2024-12-10T16:10:11.6152043+07:00",
    "tags": []
  },
  "/en/1-IAM/seccreds": {
    "title": "Security credentials",
    "content": "\r\n# AWS security credentials\r\n\r\nWhen you interact with AWS, you specify your AWS security credentials to verify who you are and whether you have permission to access the resources that you are requesting. AWS uses the security credentials to authenticate and authorize your requests.\r\n\r\nThere are different types of users in AWS, each with their own security credentials:\r\n\r\n- **Account owner (root user)** — The user who created the AWS account and has full access.\r\n\r\n- **AWS IAM Identity Center users** — Users managed in AWS IAM Identity Center.\r\n\r\n- **Federated users** — Users from external identity providers who are granted temporary access to AWS through federation.\r\n\r\n- **IAM users** — Individual users created within the AWS Identity and Access Management (IAM) service.\r\n\r\n\\\r\nUsers have either long-term or temporary (short-terms) security credentials:\r\n\r\n- Root user, IAM user, and access keys have _long-term_ security credentials that do not expire. \r\n\r\n- IAM roles, users in AWS IAM Identity Center, and federated users have _short-term_ security credentials.Temporary security credentials expire after a defined period of time or when the user ends their session. \r\n    Temporary credentials work almost identically to long-term credentials, with the following differences:\r\n\r\n    - Temporary security credentials can be configured to last for anywhere from a few minutes to several hours. After the credentials expire, AWS no longer recognizes them or allows any kind of access from API requests made with them.\r\n\r\n    - Temporary security credentials are not stored with the user but are generated dynamically and provided to the user when requested. When (or even before) the temporary security credentials expire, the user can request new credentials, as long as the user requesting them still has permissions to do so.\r\n\r\n    - For programatic access, temporary security credentials include an access key ID, a secret access key, and a security token that indicates when the credentials expire. After they expire, they're no longer valid.\r\n\r\n\\\r\nAs a result, temporary credentials have the following advantages over long-term credentials:\r\n\r\n- You do not have to distribute or embed long-term AWS security credentials with an application.\r\n\r\n- You can provide access to your AWS resources to users without having to define an AWS identity for them. Temporary credentials are the basis for roles and identity federation.\r\n\r\n- The temporary security credentials have a limited lifetime, so you do not have to update them or explicitly revoke them when they're no longer needed. After temporary security credentials expire, they cannot be reused. You can specify how long the credentials are valid, up to a maximum limit.\r\n\r\n# AWS Access Keys\r\n\r\nFor programatic access, security credentials include an access key ID and a secret access key. When you create a long-term access key, you create the access key ID (for example, `AKIAIOSFODNN7EXAMPLE`) and secret access key (for example, `wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY`) as a set. The secret access key is available for download only when you create it. If you don't download your secret access key or if you lose it, you must create a new one. Access key IDs beginning with `AKIA` are long-term access keys for an IAM user or an AWS account root user. Access key IDs beginning with `ASIA` are temporary credentials access keys that you create using AWS STS operations.",
    "lastmodified": "2024-12-10T16:43:13.4522706+07:00",
    "tags": []
  },
  "/en/2-CLIandSDK/": {
    "title": "Chapter 2: AWS CLI and AWS SDK",
    "content": "\r\nBefore this chapter, you have accessed and interacted with AWS via its web-based management console, which is a Graphical User Interface (GUI). However, to access and manage your resources programmatically, the AWS Command Line Interface (CLI) and the AWS Software Development Kit (SDK) are two powerful and useful tools for these tasks.\r\n\r\n# AWS CLI\r\n\r\nAWS CLI is a command-line tool that allows you to interact with AWS services using commands in your Terminal/Command Promt/PowerShell. With AWS CLI, you can perform various operations on your AWS resources at scales. You can also write scripts with multiple commands to automate repeated tasks, or a long sequence of tasks, which can be tedious and prone to error to do manually.\r\n\r\nFor more details, see the [CLI guides](./cli).\r\n\r\n# AWS SDK\r\n\r\nAWS SDKs are collections of software development tools, libraries and APIs that allow you to build applications that interact with AWS services. AWS SDKs are available in several programming languages, including Java, Python, .NET, etc. With AWS SDK, you can integrate your application with AWS services and perform operations on your resources programmatically.",
    "lastmodified": "2024-12-10T16:27:45.9924809+07:00",
    "tags": []
  },
  "/en/2-CLIandSDK/cli/": {
    "title": "The AWS CLI",
    "content": "\r\nAWS CLI is a command-line tool that allows you to interact with AWS services using commands in your Terminal/Command Promt/PowerShell. With AWS CLI, you can perform various operations on your AWS resources at scales. You can also write scripts with multiple commands to automate repeated tasks, or a long sequence of tasks, which can be tedious and prone to error to do manually.\r\n\r\n# Differences betwen v1 and v2\r\n\r\n# The basic form of a command",
    "lastmodified": "2024-12-10T16:28:49.4524539+07:00",
    "tags": []
  }
}